[{"/home/ad_gutierrez/Desktop/react/implement-high-fidelity-designs-with-Material-UI-and-React/1-introduction/arcdevelopment/src/index.js":"1","/home/ad_gutierrez/Desktop/react/implement-high-fidelity-designs-with-Material-UI-and-React/1-introduction/arcdevelopment/src/components/App.js":"2","/home/ad_gutierrez/Desktop/react/implement-high-fidelity-designs-with-Material-UI-and-React/1-introduction/arcdevelopment/src/components/ui/Header.js":"3","/home/ad_gutierrez/Desktop/react/implement-high-fidelity-designs-with-Material-UI-and-React/1-introduction/arcdevelopment/src/components/ui/Theme.js":"4"},{"size":370,"mtime":1609235404375,"results":"5","hashOfConfig":"6"},{"size":1231,"mtime":1609266606736,"results":"7","hashOfConfig":"6"},{"size":9005,"mtime":1609268397052,"results":"8","hashOfConfig":"6"},{"size":610,"mtime":1609250715260,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xzj3r0",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ad_gutierrez/Desktop/react/implement-high-fidelity-designs-with-Material-UI-and-React/1-introduction/arcdevelopment/src/index.js",[],"/home/ad_gutierrez/Desktop/react/implement-high-fidelity-designs-with-Material-UI-and-React/1-introduction/arcdevelopment/src/components/App.js",[],"/home/ad_gutierrez/Desktop/react/implement-high-fidelity-designs-with-Material-UI-and-React/1-introduction/arcdevelopment/src/components/ui/Header.js",["19","20"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport { makeStyles } from '@material-ui/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport logo from '../../assets/logo.svg';\n\nfunction ElevationScroll(props) {\n  const { children } = props;\n\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0\n  });\n\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0\n  });\n}\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    zIndex: theme.zIndex.modal + 1\n  },\n  toolbarMargin: {\n    ...theme.mixins.toolbar,\n    marginBottom: '3em',\n    [theme.breakpoints.down('md')]: {\n      marginBottom: '2em'\n    },\n    [theme.breakpoints.down('xs')]: {\n      marginBottom: '1.25em'\n    }\n  },\n  logoContainer: {\n    padding: 0,\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  },\n  logo: {\n    height: '7em',\n    [theme.breakpoints.down('md')]: {\n      height: '7em'\n    },\n    [theme.breakpoints.down('xs')]: {\n      height: '5em'\n    }\n  },\n  tabContainer: { marginLeft: 'auto' },\n  tab: {\n    ...theme.typography.tab,\n    minWidth: 10,\n    marginLeft: '25px'\n  },\n  button: {\n    ...theme.typography.estimate,\n    borderRadius: '50px',\n    margin: '0px 25px 0px 50px',\n    height: '45px'\n  },\n  menu: {\n    backgroundColor: theme.palette.common.blue,\n    color: 'white',\n    borderRadius: '0px'\n  },\n  menuItem: {\n    ...theme.typography.tab,\n    opacity: 0.7,\n    '&:hover': {\n      opacity: 1\n    }\n  },\n  drawerIconContainer: {\n    marginLeft: 'auto',\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  },\n  drawer: { backgroundColor: theme.palette.common.blue },\n  drawerItemText: {\n    ...theme.typography.tab,\n    color: 'white',\n    opacity: 0.7\n  },\n  drawerItemTextEstimate: {\n    backgroundColor: theme.palette.common.orange\n  },\n  drawerItemSelected: {\n    '& .MuiListItemText-root': {\n      opacity: 1\n    }\n  }\n}));\n\nconst Header = props => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent);\n\n  const matches = useMediaQuery(theme.breakpoints.down('md'));\n\n  const [value, setValue] = useState(0);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [openMenu, setOpenMenu] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [openDrawer, setOpenDrawer] = useState(false);\n\n  const handleChange = (e, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleClick = e => {\n    setAnchorEl(e.currentTarget);\n    setOpenMenu(true);\n  };\n\n  const handleClose = e => {\n    setAnchorEl(null);\n    setOpenMenu(false);\n  };\n\n  const handleMenuItemClick = (e, i) => {\n    setAnchorEl(null);\n    setOpenMenu(false);\n    setSelectedIndex(i);\n  };\n\n  const menuOptions = [\n    { name: 'Services', link: '/services', activeIndex: 1, selectedIndex: 0 },\n    {\n      name: 'Custom Software Development',\n      link: 'customsoftware',\n      activeIndex: 1,\n      selectedIndex: 1\n    },\n    {\n      name: 'Mobile App Development',\n      link: 'mobileapps',\n      activeIndex: 1,\n      selectedIndex: 2\n    },\n    {\n      name: 'Website Development',\n      link: 'websites',\n      activeIndex: 1,\n      selectedIndex: 3\n    }\n  ];\n\n  const routes = [\n    { name: 'Home', link: '/', activeIndex: 0 },\n    {\n      name: 'Services',\n      link: '/services',\n      activeIndex: 1,\n      ariaOwns: anchorEl ? 'simple-menu' : undefined,\n      ariaPopUp: anchorEl ? 'true' : undefined,\n      mouseOver: e => handleClick(e)\n    },\n    { name: 'The Revolution', link: '/revolution', activeIndex: 2 },\n    { name: 'About Us', link: '/about', activeIndex: 3 },\n    { name: 'Contact Us', link: '/contact', activeIndex: 4 }\n  ];\n\n  useEffect(() => {\n    [...menuOptions, ...routes].forEach(route => {\n      switch (window.location.pathname) {\n        case `${route.link}`:\n          if (value !== route.activeIndex) {\n            setValue(route.activeIndex);\n            if (route.selectedIndex && route.selectedIndex !== selectedIndex) {\n              setSelectedIndex(route.selectedIndex);\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    });\n  }, [value, menuOptions, selectedIndex, routes]);\n\n  const tabs = (\n    <>\n      <Tabs\n        value={value}\n        onChange={handleChange}\n        className={classes.tabContainer}\n        indicatorColor=\"primary\"\n      >\n        {routes.map((route, i) => (\n          <Tab\n            key={`${route.name}${i}`}\n            className={classes.tab}\n            component={Link}\n            to={route.link}\n            label={route.name}\n            aria-owns={route.ariaOwns}\n            aria-haspopup={route.ariaPopUp}\n            onMouseOver={route.mouseOver}\n          />\n        ))}\n      </Tabs>\n      <Button\n        className={classes.button}\n        variant=\"contained\"\n        color=\"secondary\"\n        component={Link}\n        to=\"/estimate\"\n      >\n        Free Estimate\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        open={openMenu}\n        onClose={handleClose}\n        MenuListProps={{ onMouseLeave: handleClose }}\n        classes={{ paper: classes.menu }}\n        elevation={0}\n        keepMounted\n        style={{ zIndex: 1302 }}\n      >\n        {menuOptions.map(({ name, link }, i) => (\n          <MenuItem\n            key={name}\n            onClick={e => {\n              handleMenuItemClick(e, i);\n              setValue(i);\n              handleClose();\n            }}\n            selected={i === selectedIndex}\n            component={Link}\n            to={`${link}`}\n            classes={{ root: classes.menuItem }}\n          >\n            {name}\n          </MenuItem>\n        ))}\n      </Menu>\n    </>\n  );\n\n  const drawer = (\n    <>\n      <SwipeableDrawer\n        disableBackdropTransition={!iOS}\n        disableDiscovery={iOS}\n        open={openDrawer}\n        onClose={() => setOpenDrawer(false)}\n        onOpen={() => setOpenDrawer(true)}\n        classes={{ paper: classes.drawer }}\n      >\n        <div className={classes.toolbarMargin} />\n        <List disablePadding>\n          {routes.map(route => (\n            <ListItem\n              key={`${route.name}-${route.activeIndex}`}\n              component={Link}\n              to={route.link}\n              onClick={() => {\n                setOpenDrawer(false);\n                setValue(route.activeIndex);\n              }}\n              selected={value === route.activeIndex}\n              classes={{ selected: classes.drawerItemSelected }}\n            >\n              <ListItemText\n                className={classes.drawerItemText}\n                disableTypography\n              >\n                {route.name}\n              </ListItemText>\n            </ListItem>\n          ))}\n          <ListItem\n            classes={{\n              root: classes.drawerItemTextEstimate,\n              selected: classes.drawerItemSelected\n            }}\n            onClick={() => {\n              setOpenDrawer(false);\n              setValue(5);\n            }}\n            component={Link}\n            to=\"/estimate\"\n            selected={value === 5}\n          >\n            <ListItemText className={classes.drawerItemText} disableTypography>\n              Free Estimate\n            </ListItemText>\n          </ListItem>\n        </List>\n      </SwipeableDrawer>\n      <IconButton\n        className={classes.drawerIconContainer}\n        onClick={() => setOpenDrawer(!openDrawer)}\n      >\n        <MenuIcon className={classes.drawerIcon} />\n      </IconButton>\n    </>\n  );\n\n  return (\n    <>\n      <ElevationScroll>\n        <AppBar className={classes.appBar} position=\"fixed\">\n          <Toolbar disableGutters>\n            <Button\n              disableRipple\n              component={Link}\n              to=\"/\"\n              className={classes.logoContainer}\n              onClick={() => setValue(0)}\n            >\n              <img src={logo} className={classes.logo} alt=\"company logo\" />\n            </Button>\n            {matches ? drawer : tabs}\n          </Toolbar>\n        </AppBar>\n      </ElevationScroll>\n      <div className={classes.toolbarMargin} />\n    </>\n  );\n};\n\nexport default Header;\n","/home/ad_gutierrez/Desktop/react/implement-high-fidelity-designs-with-Material-UI-and-React/1-introduction/arcdevelopment/src/components/ui/Theme.js",[],{"ruleId":"21","severity":1,"message":"22","line":146,"column":9,"nodeType":"23","endLine":166,"endColumn":4},{"ruleId":"21","severity":1,"message":"24","line":168,"column":9,"nodeType":"23","endLine":181,"endColumn":4},"react-hooks/exhaustive-deps","The 'menuOptions' array makes the dependencies of useEffect Hook (at line 198) change on every render. To fix this, wrap the initialization of 'menuOptions' in its own useMemo() Hook.","VariableDeclarator","The 'routes' array makes the dependencies of useEffect Hook (at line 198) change on every render. To fix this, wrap the initialization of 'routes' in its own useMemo() Hook."]